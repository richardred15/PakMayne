"use strict";

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Definitions
 */

/**
 * @type {Game}
 */
var game;
/**
 * Functions
 */

function init() {
  game = new Game();
  game.start();
}

var Bot =
/*#__PURE__*/
function (_Player) {
  _inherits(Bot, _Player);

  /**
   * Definitions
   */

  /**
   * @type {Player}
   */
  function Bot() {
    var _this;

    _classCallCheck(this, Bot);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Bot).call(this));

    _defineProperty(_assertThisInitialized(_this), "target", null);

    return _this;
  }
  /**
   * Functions
   */


  return Bot;
}(Player);

var Game =
/*#__PURE__*/
function () {
  /**
   * Definitions
   */

  /**
   * @type {Player}
   */

  /**
   * @type {Player[]}
   */

  /**
   * @type {Bot[]}
   */

  /**
   * @type {World}
   */

  /**
   * @type {THREE.Scene}
   */
  function Game() {
    _classCallCheck(this, Game);

    _defineProperty(this, "player", null);

    _defineProperty(this, "players", []);

    _defineProperty(this, "bots", []);

    _defineProperty(this, "map", null);

    _defineProperty(this, "scene", null);

    _defineProperty(this, "paused", false);

    _defineProperty(this, "lost", false);

    _defineProperty(this, "gameOver", false);

    _defineProperty(this, "frameRate", 30);

    this.player = new Player();
    this.player.health = 10000000;
    this.players.push(this.player); // Create a directional light

    var light = new THREE.AmbientLight(0xffffff, 5.0);
    var dirLight = new THREE.DirectionalLight(0xffffff, 5.0);
    console.log("Game loaded"); // move the light back and up a bit

    /* light.position.set(0, 0, 0);
    dirLight.position.set(10, 10, 10);
    // remember to add the light to the scene
    scene.add(light);
    scene.add(dirLight);
        for (let player of players) {
        scene.add(player.mesh);
    }
    camera.position.z = 5;
    player.mesh.translateZ(15);
    player.mesh.translateX(-5);
    player.mesh.lookAt(new THREE.Vector3());
    scene.add(reticle);
    var deltaX = 10;
    var deltaY = 5;
    this.cameraAngle = Math.atan2(deltaY, deltaX); */
  }
  /**
   * Functions
   */


  _createClass(Game, [{
    key: "start",
    value: function start() {}
  }, {
    key: "render",
    value: function render() {}
  }]);

  return Game;
}();

var World =
/**
 * Definitions
 */
function World(_size) {
  _classCallCheck(this, World);

  _defineProperty(this, "size", new THREE.Vector3());

  if (_size) this.size = _size;
}
/**
 * Functions
 */
;

var Network =
/*#__PURE__*/
function () {
  /**
   * Definitions
   */
  function Network() {
    _classCallCheck(this, Network);
  }
  /**
   * Functions
   */


  _createClass(Network, [{
    key: "connect",
    value: function connect() {}
  }, {
    key: "disconnect",
    value: function disconnect() {}
  }, {
    key: "emit",
    value: function emit() {}
  }]);

  return Network;
}();

var Player =
/**
 * Definitions
 */

/**
 * @type {Weapon}
 */
function Player() {
  _classCallCheck(this, Player);

  _defineProperty(this, "name", "");

  _defineProperty(this, "health", 100);

  _defineProperty(this, "weapon", null);

  _defineProperty(this, "speed", 2);
}
/**
 * Functions
 */
;

var Weapon =
/**
 * Definitions
 */
function Weapon() {
  _classCallCheck(this, Weapon);

  _defineProperty(this, "ammo", 100);

  _defineProperty(this, "magazineSize", 20);

  _defineProperty(this, "magazine", magazineSize);

  _defineProperty(this, "fireRate", 0.1);

  _defineProperty(this, "automatic", false);
}
/**
 * Functions
 */
;
